// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package sqllite

import (
	"context"
)

const createResponse = `-- name: CreateResponse :one
INSERT INTO responses (path, body, cached_at, expired_at) VALUES (?, ?, ?, ?) RETURNING path, body, cached_at, expired_at
`

type CreateResponseParams struct {
	Path      string
	Body      string
	CachedAt  int64
	ExpiredAt int64
}

func (q *Queries) CreateResponse(ctx context.Context, arg CreateResponseParams) (Response, error) {
	row := q.db.QueryRowContext(ctx, createResponse,
		arg.Path,
		arg.Body,
		arg.CachedAt,
		arg.ExpiredAt,
	)
	var i Response
	err := row.Scan(
		&i.Path,
		&i.Body,
		&i.CachedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getResponse = `-- name: GetResponse :one
SELECT path, body, cached_at, expired_at FROM responses WHERE path = ? LIMIT 1
`

func (q *Queries) GetResponse(ctx context.Context, path string) (Response, error) {
	row := q.db.QueryRowContext(ctx, getResponse, path)
	var i Response
	err := row.Scan(
		&i.Path,
		&i.Body,
		&i.CachedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateResponse = `-- name: UpdateResponse :one
UPDATE responses SET body = ?, cached_at = ?, expired_at = ? WHERE path = ? RETURNING path, body, cached_at, expired_at
`

type UpdateResponseParams struct {
	Body      string
	CachedAt  int64
	ExpiredAt int64
	Path      string
}

func (q *Queries) UpdateResponse(ctx context.Context, arg UpdateResponseParams) (Response, error) {
	row := q.db.QueryRowContext(ctx, updateResponse,
		arg.Body,
		arg.CachedAt,
		arg.ExpiredAt,
		arg.Path,
	)
	var i Response
	err := row.Scan(
		&i.Path,
		&i.Body,
		&i.CachedAt,
		&i.ExpiredAt,
	)
	return i, err
}
